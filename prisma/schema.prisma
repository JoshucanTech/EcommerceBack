// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User model with role-based access control
model User {
  id                String              @id @default(uuid())
  email             String              @unique
  password          String
  firstName         String?
  lastName          String?
  phone             String?
  avatar            String?
  role              Role                @default(BUYER)
  isActive          Boolean             @default(true)
  isVerified        Boolean             @default(false)
  verificationToken String?
  resetToken        String?
  resetTokenExpiry  DateTime?
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  address           Address[]
  buyer             Buyer?
  vendor            Vendor?
  rider             Rider?
  admin             Admin?
  reviews           Review[]
  orders            Order[]
  notifications     Notification[]
  messages          Message[]
  sentMessages      Message[]           @relation("SentMessages")
  paymentMethods    PaymentMethod[]
  wishlistItems     WishlistItem[]
  carts             Cart[]
}

enum Role {
  ADMIN
  VENDOR
  BUYER
  RIDER
}

// Buyer profile
model Buyer {
  id                String         @id @default(uuid())
  userId            String         @unique
  user              User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  defaultAddressId  String?
  defaultAddress    Address?       @relation(fields: [defaultAddressId], references: [id])
  defaultPaymentId  String?
  defaultPayment    PaymentMethod? @relation(fields: [defaultPaymentId], references: [id])
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt
}

// Vendor profile
model Vendor {
  id                String      @id @default(uuid())
  userId            String      @unique
  user              User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  businessName      String
  businessEmail     String?
  businessPhone     String?
  businessAddress   String?
  businessLogo      String?
  businessBanner    String?
  description       String?
  isVerified        Boolean     @default(false)
  verificationDocuments String[]
  rating            Float       @default(0)
  totalRatings      Int         @default(0)
  commissionRate    Float       @default(0)
  balance           Float       @default(0)
  bankName          String?
  bankAccountNumber String?
  bankAccountName   String?
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
  products          Product[]
  coupons           Coupon[]
}

// Rider profile
model Rider {
  id                String      @id @default(uuid())
  userId            String      @unique
  user              User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  vehicleType       String?
  vehiclePlateNumber String?
  licenseNumber     String?
  identificationNumber String?
  identificationDocument String?
  licenseDocument   String?
  isVerified        Boolean     @default(false)
  isAvailable       Boolean     @default(false)
  currentLatitude   Float?
  currentLongitude  Float?
  rating            Float       @default(0)
  totalRatings      Int         @default(0)
  balance           Float       @default(0)
  bankName          String?
  bankAccountNumber String?
  bankAccountName   String?
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
  deliveries        Delivery[]
}

// Admin profile
model Admin {
  id                String      @id @default(uuid())
  userId            String      @unique
  user              User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  permissions       String[]
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
}

// Address model
model Address {
  id                String      @id @default(uuid())
  userId            String
  user              User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  name              String?
  street            String
  city              String
  state             String
  country           String
  zipCode           String
  isDefault         Boolean     @default(false)
  latitude          Float?
  longitude         Float?
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
  buyers            Buyer[]
  orders            Order[]
}

// Product model
model Product {
  id                String      @id @default(uuid())
  vendorId          String
  vendor            Vendor      @relation(fields: [vendorId], references: [id], onDelete: Cascade)
  name              String
  slug              String      @unique
  description       String?
  price             Float
  compareAtPrice    Float?
  costPrice         Float?
  sku               String?
  barcode           String?
  inventory         Int         @default(0)
  weight            Float?
  dimensions        String?
  isActive          Boolean     @default(true)
  isFeatured        Boolean     @default(false)
  categoryId        String?
  category          Category?   @relation(fields: [categoryId], references: [id])
  images            String[]
  tags              String[]
  attributes        Json?
  rating            Float       @default(0)
  totalRatings      Int         @default(0)
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
  reviews           Review[]
  orderItems        OrderItem[]
  cartItems         CartItem[]
  wishlistItems     WishlistItem[]
  flashSaleItems    FlashSaleItem[]
}

// Category model
model Category {
  id                String      @id @default(uuid())
  name              String
  slug              String      @unique
  description       String?
  image             String?
  parentId          String?
  parent            Category?   @relation("CategoryHierarchy", fields: [parentId], references: [id])
  children          Category[]  @relation("CategoryHierarchy")
  isActive          Boolean     @default(true)
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
  products          Product[]
}

// Order model
model Order {
  id                String      @id @default(uuid())
  orderNumber       String      @unique
  userId            String
  user              User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  status            OrderStatus @default(PENDING)
  subtotal          Float
  tax               Float       @default(0)
  shipping          Float       @default(0)
  discount          Float       @default(0)
  total             Float
  couponId          String?
  coupon            Coupon?     @relation(fields: [couponId], references: [id])
  paymentStatus     PaymentStatus @default(PENDING)
  paymentMethodId   String?
  paymentMethod     PaymentMethod? @relation(fields: [paymentMethodId], references: [id])
  paymentIntentId   String?
  addressId         String
  address           Address     @relation(fields: [addressId], references: [id])
  notes             String?
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
  orderItems        OrderItem[]
  delivery          Delivery?
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
  REFUNDED
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  REFUNDED
}

// Order item model
model OrderItem {
  id                String      @id @default(uuid())
  orderId           String
  order             Order       @relation(fields: [orderId], references: [id], onDelete: Cascade)
  productId         String
  product           Product     @relation(fields: [productId], references: [id])
  quantity          Int
  price             Float
  total             Float
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
}

// Delivery model
model Delivery {
  id                String          @id @default(uuid())
  orderId           String          @unique
  order             Order           @relation(fields: [orderId], references: [id], onDelete: Cascade)
  riderId           String?
  rider             Rider?          @relation(fields: [riderId], references: [id])
  status            DeliveryStatus  @default(PENDING)
  pickupLatitude    Float?
  pickupLongitude   Float?
  dropoffLatitude   Float?
  dropoffLongitude  Float?
  estimatedDistance Float?
  estimatedDuration Int?
  actualDistance    Float?
  actualDuration    Int?
  fee               Float           @default(0)
  notes             String?
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
}

enum DeliveryStatus {
  PENDING
  ASSIGNED
  PICKED_UP
  IN_TRANSIT
  DELIVERED
  FAILED
  CANCELLED
}

// Payment method model
model PaymentMethod {
  id                String      @id @default(uuid())
  userId            String
  user              User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  type              String
  provider          String
  accountNumber     String?
  expiryMonth       Int?
  expiryYear        Int?
  isDefault         Boolean     @default(false)
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
  buyers            Buyer[]
  orders            Order[]
}

// Review model
model Review {
  id                String      @id @default(uuid())
  userId            String
  user              User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  productId         String
  product           Product     @relation(fields: [productId], references: [id], onDelete: Cascade)
  rating            Int
  comment           String?
  images            String[]
  isVerified        Boolean     @default(false)
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
}

// Coupon model
model Coupon {
  id                String      @id @default(uuid())
  vendorId          String
  vendor            Vendor      @relation(fields: [vendorId], references: [id], onDelete: Cascade)
  code              String      @unique
  type              CouponType
  value             Float
  minOrderValue     Float?
  maxDiscount       Float?
  startDate         DateTime
  endDate           DateTime
  isActive          Boolean     @default(true)
  usageLimit        Int?
  usageCount        Int         @default(0)
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
  orders            Order[]
}

enum CouponType {
  PERCENTAGE
  FIXED
}

// Flash sale model
model FlashSale {
  id                String          @id @default(uuid())
  name              String
  description       String?
  startDate         DateTime
  endDate           DateTime
  isActive          Boolean         @default(true)
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  items             FlashSaleItem[]
}

// Flash sale item model
model FlashSaleItem {
  id                String      @id @default(uuid())
  flashSaleId       String
  flashSale         FlashSale   @relation(fields: [flashSaleId], references: [id], onDelete: Cascade)
  productId         String
  product           Product     @relation(fields: [productId], references: [id], onDelete: Cascade)
  discountType      DiscountType
  discountValue     Float
  quantity          Int
  soldCount         Int         @default(0)
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt

  @@unique([flashSaleId, productId])
}

enum DiscountType {
  PERCENTAGE
  FIXED
}

// Cart model
model Cart {
  id                String      @id @default(uuid())
  userId            String
  user              User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
  items             CartItem[]
}

// Cart item model
model CartItem {
  id                String      @id @default(uuid())
  cartId            String
  cart              Cart        @relation(fields: [cartId], references: [id], onDelete: Cascade)
  productId         String
  product           Product     @relation(fields: [productId], references: [id], onDelete: Cascade)
  quantity          Int
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt

  @@unique([cartId, productId])
}

// Wishlist item model
model WishlistItem {
  id                String      @id @default(uuid())
  userId            String
  user              User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  productId         String
  product           Product     @relation(fields: [productId], references: [id], onDelete: Cascade)
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt

  @@unique([userId, productId])
}

// Notification model
model Notification {
  id                String      @id @default(uuid())
  userId            String
  user              User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  type              String
  title             String
  message           String
  isRead            Boolean     @default(false)
  data              Json?
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
}

// Message model
model Message {
  id                String      @id @default(uuid())
  content           String
  senderId          String
  sender            User        @relation("SentMessages", fields: [senderId], references: [id], onDelete: Cascade)
  receiverId        String
  receiver          User        @relation(fields: [receiverId], references: [id], onDelete: Cascade)
  isRead            Boolean     @default(false)
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
}

// Settings model
model Settings {
  id                String      @id @default(uuid())
  key               String      @unique
  value             String
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
}

