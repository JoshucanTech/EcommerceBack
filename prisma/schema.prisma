// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  USER
  VENDOR
  RIDER
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
  RETURNED
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}

enum PaymentMethod {
  CREDIT_CARD
  DEBIT_CARD
  PAYPAL
  BANK_TRANSFER
  CASH_ON_DELIVERY
}

enum DeliveryStatus {
  PENDING
  ASSIGNED
  PICKED_UP
  IN_TRANSIT
  DELIVERED
  FAILED
}

enum NotificationType {
  ORDER
  PAYMENT
  DELIVERY
  PRODUCT
  SYSTEM
}

enum VendorApplicationStatus {
  PENDING
  APPROVED
  REJECTED
}

enum RiderApplicationStatus {
  PENDING
  APPROVED
  REJECTED
}

model User {
  id                String    @id @default(uuid())
  email             String    @unique
  password          String
  name              String
  role              UserRole  @default(USER)
  phone             String?
  avatar            String?
  isActive          Boolean   @default(true)
  emailVerified     Boolean   @default(false)
  verificationToken String?
  resetToken        String?
  resetTokenExpiry  DateTime?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  // Relations
  addresses         Address[]
  orders            Order[]
  cart              Cart?
  wishlist          Wishlist?
  reviews           Review[]
  comments          Comment[]
  payments          Payment[]
  notifications     Notification[]
  vendor            Vendor?
  rider             Rider?
  vendorApplication VendorApplication?
  riderApplication  RiderApplication?
  settings          UserSettings?
}

model UserSettings {
  id                   String   @id @default(uuid())
  userId               String   @unique
  user                 User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  emailNotifications   Boolean  @default(true)
  pushNotifications    Boolean  @default(true)
  smsNotifications     Boolean  @default(false)
  marketingEmails      Boolean  @default(true)
  darkMode             Boolean  @default(false)
  language             String   @default("en")
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
}

model Address {
  id           String   @id @default(uuid())
  userId       String
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  addressLine1 String
  addressLine2 String?
  city         String
  state        String
  postalCode   String
  country      String
  isDefault    Boolean  @default(false)
  label        String?  // e.g., "Home", "Work"
  phone        String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  orders       Order[]
}

model Category {
  id          String    @id @default(uuid())
  name        String
  slug        String    @unique
  description String?
  image       String?
  isActive    Boolean   @default(true)
  parentId    String?
  parent      Category? @relation("SubCategories", fields: [parentId], references: [id])
  children    Category[] @relation("SubCategories")
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  products    Product[]
}

model Vendor {
  id              String   @id @default(uuid())
  userId          String   @unique
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  businessName    String
  slug            String   @unique
  description     String?
  logo            String?
  coverImage      String?
  address         String?
  city            String?
  state           String?
  country         String?
  postalCode      String?
  phone           String?
  email           String?
  website         String?
  socialMedia     Json?    // Store social media links as JSON
  isVerified      Boolean  @default(false)
  isActive        Boolean  @default(true)
  commissionRate  Float    @default(10) // Percentage
  balance         Float    @default(0)
  bankInfo        Json?    // Store bank information as JSON
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  products        Product[]
}

model VendorApplication {
  id              String                @id @default(uuid())
  userId          String                @unique
  user            User                  @relation(fields: [userId], references: [id], onDelete: Cascade)
  businessName    String
  description     String
  address         String
  city            String
  state           String
  country         String
  postalCode      String
  phone           String
  email           String
  website         String?
  documents       Json?                 // Store document URLs as JSON
  status          VendorApplicationStatus @default(PENDING)
  notes           String?
  reviewedBy      String?
  reviewedAt      DateTime?
  createdAt       DateTime              @default(now())
  updatedAt       DateTime              @updatedAt
}

model Rider {
  id              String   @id @default(uuid())
  userId          String   @unique
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  vehicleType     String
  vehicleNumber   String?
  licenseNumber   String
  isAvailable     Boolean  @default(false)
  isVerified      Boolean  @default(false)
  isActive        Boolean  @default(true)
  currentLat      Float?
  currentLng      Float?
  lastLocationUpdate DateTime?
  rating          Float    @default(0)
  totalDeliveries Int      @default(0)
  balance         Float    @default(0)
  bankInfo        Json?    // Store bank information as JSON
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  deliveries      Delivery[]
}

model RiderApplication {
  id              String                @id @default(uuid())
  userId          String                @unique
  user            User                  @relation(fields: [userId], references: [id], onDelete: Cascade)
  vehicleType     String
  vehicleNumber   String?
  licenseNumber   String
  documents       Json?                 // Store document URLs as JSON
  status          RiderApplicationStatus @default(PENDING)
  notes           String?
  reviewedBy      String?
  reviewedAt      DateTime?
  createdAt       DateTime              @default(now())
  updatedAt       DateTime              @updatedAt
}

model Product {
  id              String   @id @default(uuid())
  name            String
  slug            String   @unique
  description     String
  price           Float
  salePrice       Float?
  quantity        Int      @default(0)
  sku             String?  @unique
  images          String[] // Array of image URLs
  isActive        Boolean  @default(true)
  isFeatured      Boolean  @default(false)
  vendorId        String
  vendor          Vendor   @relation(fields: [vendorId], references: [id])
  categoryId      String
  category        Category @relation(fields: [categoryId], references: [id])
  attributes      Json?    // Store product attributes as JSON
  tags            String[]
  metaTitle       String?
  metaDescription String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  cartItems       CartItem[]
  wishlistItems   WishlistItem[]
  orderItems      OrderItem[]
  reviews         Review[]
  comments        Comment[]
  flashSaleItems  FlashSaleItem[]
}

model Cart {
  id        String     @id @default(uuid())
  userId    String     @unique
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  items     CartItem[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model CartItem {
  id        String   @id @default(uuid())
  cartId    String
  cart      Cart     @relation(fields: [cartId], references: [id], onDelete: Cascade)
  productId String
  product   Product  @relation(fields: [productId], references: [id])
  quantity  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([cartId, productId])
}

model Wishlist {
  id        String         @id @default(uuid())
  userId    String         @unique
  user      User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  items     WishlistItem[]
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
}

model WishlistItem {
  id         String   @id @default(uuid())
  wishlistId String
  wishlist   Wishlist @relation(fields: [wishlistId], references: [id], onDelete: Cascade)
  productId  String
  product    Product  @relation(fields: [productId], references: [id])
  createdAt  DateTime @default(now())

  @@unique([wishlistId, productId])
}

model Order {
  id              String       @id @default(uuid())
  orderNumber     String       @unique
  userId          String
  user            User         @relation(fields: [userId], references: [id])
  items           OrderItem[]
  subtotal        Float
  tax             Float
  shipping        Float
  discount        Float        @default(0)
  total           Float
  status          OrderStatus  @default(PENDING)
  paymentStatus   PaymentStatus @default(PENDING)
  paymentMethod   PaymentMethod
  addressId       String
  address         Address      @relation(fields: [addressId], references: [id])
  notes           String?
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt

  // Relations
  delivery        Delivery?
  payment         Payment?
}

model OrderItem {
  id        String   @id @default(uuid())
  orderId   String
  order     Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  productId String
  product   Product  @relation(fields: [productId], references: [id])
  quantity  Int
  price     Float
  total     Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Delivery {
  id              String         @id @default(uuid())
  orderId         String         @unique
  order           Order          @relation(fields: [orderId], references: [id])
  riderId         String?
  rider           Rider?         @relation(fields: [riderId], references: [id])
  status          DeliveryStatus @default(PENDING)
  trackingNumber  String?        @unique
  estimatedDelivery DateTime?
  actualDelivery   DateTime?
  notes           String?
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
}

model Payment {
  id                  String         @id @default(uuid())
  orderId             String         @unique
  order               Order          @relation(fields: [orderId], references: [id])
  userId              String
  user                User           @relation(fields: [userId], references: [id])
  amount              Float
  method              PaymentMethod
  status              PaymentStatus  @default(PENDING)
  transactionReference String?
  createdAt           DateTime       @default(now())
  updatedAt           DateTime       @updatedAt
}

model Review {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  productId String
  product   Product  @relation(fields: [productId], references: [id])
  rating    Int
  comment   String?
  isVerified Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, productId])
}

model Comment {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  productId String
  product   Product  @relation(fields: [productId], references: [id])
  content   String
  parentId  String?
  parent    Comment? @relation("CommentReplies", fields: [parentId], references: [id])
  replies   Comment[] @relation("CommentReplies")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Notification {
  id          String           @id @default(uuid())
  userId      String
  user        User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  title       String
  message     String
  type        NotificationType
  isRead      Boolean          @default(false)
  entityId    String?          // ID of related entity (order, product, etc.)
  redirectUrl String?
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
}

model FlashSale {
  id          String          @id @default(uuid())
  name        String
  description String?
  startDate   DateTime
  endDate     DateTime
  isActive    Boolean         @default(true)
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt

  // Relations
  items       FlashSaleItem[]
}

model FlashSaleItem {
  id          String    @id @default(uuid())
  flashSaleId String
  flashSale   FlashSale @relation(fields: [flashSaleId], references: [id], onDelete: Cascade)
  productId   String
  product     Product   @relation(fields: [productId], references: [id])
  discountPercentage Float
  discountPrice Float
  quantity    Int
  soldCount   Int       @default(0)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@unique([flashSaleId, productId])
}

